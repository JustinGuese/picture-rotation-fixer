name: Build and Release Binaries

on:
  push:
    branches:
    - main

jobs:
  build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          artifact: dist/picture-rotation-fixer
          artifact-name: picture-rotation-fixer-linux-x64
        - os: windows-latest
          artifact: dist/picture-rotation-fixer.exe
          artifact-name: picture-rotation-fixer-windows-x64.exe
        - os: macos-latest
          artifact: dist/picture-rotation-fixer
          artifact-name: picture-rotation-fixer-macos-x64
        - os: macos-14
          artifact: dist/picture-rotation-fixer
          artifact-name: picture-rotation-fixer-macos-arm64
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Build executable
      shell: bash
      run: |
        # Pre-download YOLO model and copy to working directory
        uv run python -c "
        import os
        from ultralytics import YOLO
        import shutil
        
        # Download model 
        model = YOLO('yolo11n.pt')
        
        # Try to find and copy the model file to current directory
        model_paths = [
            'yolo11n.pt',  # If already in current dir
            os.path.expanduser('~/.cache/torch/hub/ultralytics_yolov5_master/yolo11n.pt'),
            os.path.expanduser('~/Library/Application Support/Ultralytics/weights/yolo11n.pt'),  # macOS
            os.path.expanduser('~/.ultralytics/weights/yolo11n.pt'),  # Linux
            os.path.expanduser('~/AppData/Roaming/Ultralytics/weights/yolo11n.pt'),  # Windows
        ]
        
        copied = False
        for path in model_paths:
            if os.path.exists(path) and path != 'yolo11n.pt':
                shutil.copy2(path, 'yolo11n.pt')
                print(f'Copied model from {path} to yolo11n.pt')
                copied = True
                break
        
        if not copied and not os.path.exists('yolo11n.pt'):
            print('Warning: Could not locate YOLO model file')
        else:
            print(f'YOLO model ready at: {os.path.abspath(\"yolo11n.pt\")}')
        "
        
        # Get OpenCV data path
        CV2_DATA=$(uv run python -c "import cv2; import os; print(os.path.join(cv2.data.haarcascades, 'haarcascade_frontalface_default.xml'))")
        
        # Build executable (YOLO model bundling is conditional)
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [ -f "yolo11n.pt" ]; then
            uv run pyinstaller rotate.py --onefile --name "picture-rotation-fixer" \
              --add-data "${CV2_DATA};cv2/data/" \
              --add-data "yolo11n.pt;." \
              --hidden-import=ultralytics \
              --hidden-import=ultralytics.models \
              --hidden-import=ultralytics.utils
          else
            echo "Building without YOLO model bundle"
            uv run pyinstaller rotate.py --onefile --name "picture-rotation-fixer" \
              --add-data "${CV2_DATA};cv2/data/" \
              --hidden-import=ultralytics
          fi
        else
          if [ -f "yolo11n.pt" ]; then
            uv run pyinstaller rotate.py --onefile --name "picture-rotation-fixer" \
              --add-data "${CV2_DATA}:cv2/data/" \
              --add-data "yolo11n.pt:." \
              --hidden-import=ultralytics \
              --hidden-import=ultralytics.models \
              --hidden-import=ultralytics.utils
          else
            echo "Building without YOLO model bundle"
            uv run pyinstaller rotate.py --onefile --name "picture-rotation-fixer" \
              --add-data "${CV2_DATA}:cv2/data/" \
              --hidden-import=ultralytics
          fi
        fi

    - name: Rename binary for release
      shell: bash
      run: |
        if [ -f "${{ matrix.artifact }}" ]; then
          mv "${{ matrix.artifact }}" "dist/${{ matrix.artifact-name }}"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-binary
        path: dist/${{ matrix.artifact-name }}

  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Prepare release files
      run: |
        find dist/ -type f -exec mv {} dist/ \; 2>/dev/null || true
        find dist/ -type d -empty -delete 2>/dev/null || true
        ls -la dist/

    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        files: dist/*
